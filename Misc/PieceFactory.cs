#region Using Statements
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
#endregion

namespace TempleGardens
{
    public class PieceFactory : IDisposable
    {
        public PieceFactory() { }

        public List<PieceTemplate> BuildSpecialLibrary()
        {
            var source = GenSource();


            List<PieceTemplate> Pieces = new List<PieceTemplate>();

            var currentFlower = 0;
            var currentCombitronicsCount = 1;

            var searchWidth = 7 * 28;


            for (var x = 0; x < 28; x++)
                for (var y = 0; y < 9; y++)
                {
                    var baseShape = new byte[7, 7];

                    var u = 0;
                    var v = 0;

                    var offsetX = x * 7;
                    var offsetY = y * 7;

                    for (var i = offsetX; i < 7 + offsetX; i++)
                    {
                        v = 0;
                        for (var j = offsetY; j < 7 + offsetY; j++)
                        {
                            baseShape[u, v] = source[j * searchWidth + i]; 

                            v++;
                        }
                        u++;
                    }


                    Pieces.Add(new PieceTemplate(GetColors(currentCombitronicsCount), baseShape, PieceTemplate.Flowers[currentFlower], MasterRandom.FRandom.NextBool()));

                    currentFlower++;

                    if (currentFlower == PieceTemplate.Flowers.Length)
                    {
                        currentCombitronicsCount++;
                        currentFlower = 0;
                    }

                    //token++;

                    if (Pieces.Count == 252)
                        break;
                }

            source = null;

            return Pieces;
        }


//        public List<PieceTemplate> BuildTemplateLibrary()
//        {
//            List<PieceTemplate> Pieces = new List<PieceTemplate>();
//
//            var currentFlower = 0;
//            var currentCombitronicsCount = 1;
//
//            //var token = 0;
//
//            var searchWidth = 7 * 28;
//            var searchHeight = 7 * 9;
//
//            Color[] colorMap = new Color[searchWidth * searchHeight];
//			SpriteLoader.Shapes.GetData(colorMap);
//
//                for (var x = 0; x < 28; x++)
//                    for (var y = 0; y < 9; y++)
//                    {
//                        var baseShape = new byte[7, 7];
//
//                        var u = 0;
//                        var v = 0;
//
//                        var offsetX = x * 7;
//                        var offsetY = y * 7;
//
//                        for (var i = offsetX; i < 7 + offsetX; i++)
//                        {
//                            v = 0;
//                            for (var j = offsetY; j < 7 + offsetY; j++)
//                            {
//                                var currentColor = colorMap[j * searchWidth + i];
//
//                                if (currentColor.R == 153 && currentColor.G == 7 && currentColor.B == 0)
//                                    baseShape[u, v] = 1;
//                                else if (currentColor.R == 153 && currentColor.G == 72 && currentColor.B == 0)
//                                    baseShape[u, v] = 2;
//                                else if (currentColor.R == 153 && currentColor.G == 151 && currentColor.B == 0)
//                                    baseShape[u, v] = 3;
//                                else if (currentColor.R == 32 && currentColor.G == 153 && currentColor.B == 0)
//                                    baseShape[u, v] = 4;
//                                else if (currentColor.R == 0 && currentColor.G == 122 && currentColor.B == 153)
//                                    baseShape[u, v] = 5;
//                                else if (currentColor.R == 22 && currentColor.G == 0 && currentColor.B == 153)
//                                    baseShape[u, v] = 6;
//                                else if (currentColor.R == 94 && currentColor.G == 0 && currentColor.B == 153)
//                                    baseShape[u, v] = 7;
//                                else if (currentColor.R == 153 && currentColor.G == 0 && currentColor.B == 137)
//                                    baseShape[u, v] = 8;
//                                else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 128)
//                                    baseShape[u, v] = 9;
//                                else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 204)
//                                    baseShape[u, v] = 10;
//                                else if (currentColor.R == 128 && currentColor.G == 179 && currentColor.B == 255)
//                                    baseShape[u, v] = 11;
//                                else if (currentColor.R == 128 && currentColor.G == 255 && currentColor.B == 179)
//                                    baseShape[u, v] = 12;
//                                else
//                                    baseShape[u, v] = 0;
//
//                                v++;
//                            }
//                            u++;
//                        }
//
//
//                        Pieces.Add(new PieceTemplate(GetColors(currentCombitronicsCount), baseShape, PieceTemplate.Flowers[currentFlower], MasterRandom.FRandom.NextBool()));
//
//                        currentFlower++;
//
//                        if (currentFlower == PieceTemplate.Flowers.Length)
//                        {
//                            currentCombitronicsCount++;
//                            currentFlower = 0;
//                        }
//
//                        //token++;
//
//                        if (Pieces.Count == 252)
//                            break;
//                    }
//
//            return Pieces;
//        }

        //public List<PieceTemplate> GetIt()
        //{
        //    ObjectSerializer cereal = new ObjectSerializer();

        //    List<PieceTemplate> ffff = new List<PieceTemplate>();

        //     ffff = cereal.DeserializeObject<List<PieceTemplate>>("forter.gin");

        //     return ffff;
        //}


        private ColorPair GetColors(int index)
        {
            switch (index)
            {
                case 1:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[0]); // red red
                case 2:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[1]); // white white
                case 3:
                    return new ColorPair(PieceTemplate.ColorFamilies[2], PieceTemplate.ColorFamilies[2]); // yellow yellow
                case 4:
                    return new ColorPair(PieceTemplate.ColorFamilies[3], PieceTemplate.ColorFamilies[3]); // pink pink
                case 5:
                    return new ColorPair(PieceTemplate.ColorFamilies[4], PieceTemplate.ColorFamilies[4]); // lblue lblue
                case 6:
                    return new ColorPair(PieceTemplate.ColorFamilies[5], PieceTemplate.ColorFamilies[5]); // dblue 
                case 7:
                    return new ColorPair(PieceTemplate.ColorFamilies[6], PieceTemplate.ColorFamilies[6]);
                case 8:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[1]);
                case 9:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[2]);
                case 10:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[3]);
                case 11:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[4]);
                case 12:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[5]);
                case 13:
                    return new ColorPair(PieceTemplate.ColorFamilies[0], PieceTemplate.ColorFamilies[6]);
                case 14:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[2]);
                case 15:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[3]);
                case 16:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[4]);
                case 17:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[5]);
                case 18:
                    return new ColorPair(PieceTemplate.ColorFamilies[1], PieceTemplate.ColorFamilies[6]);
                case 19:
                    return new ColorPair(PieceTemplate.ColorFamilies[2], PieceTemplate.ColorFamilies[3]);
                case 20:
                    return new ColorPair(PieceTemplate.ColorFamilies[2], PieceTemplate.ColorFamilies[4]);
                case 21:
                    return new ColorPair(PieceTemplate.ColorFamilies[2], PieceTemplate.ColorFamilies[5]);
                case 22:
                    return new ColorPair(PieceTemplate.ColorFamilies[2], PieceTemplate.ColorFamilies[6]);
                case 23:
                    return new ColorPair(PieceTemplate.ColorFamilies[3], PieceTemplate.ColorFamilies[4]);
                case 24:
                    return new ColorPair(PieceTemplate.ColorFamilies[3], PieceTemplate.ColorFamilies[5]);
                case 25:
                    return new ColorPair(PieceTemplate.ColorFamilies[3], PieceTemplate.ColorFamilies[6]);
                case 26:
                    return new ColorPair(PieceTemplate.ColorFamilies[4], PieceTemplate.ColorFamilies[5]);
                case 27:
                    return new ColorPair(PieceTemplate.ColorFamilies[4], PieceTemplate.ColorFamilies[6]);
                case 28:
                    return new ColorPair(PieceTemplate.ColorFamilies[5], PieceTemplate.ColorFamilies[6]);
            }
            return new ColorPair(Color.Red, Color.Red);

        }

        private byte[] GenSource()
        {
        byte[] grid = new byte[]
      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 2, 3, 4, 0, 0, 
        0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 5, 4, 3, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 3, 2, 4, 3, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 2, 1, 0, 0, 0, 
        0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 3, 2, 3, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 2, 3, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 5, 4, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 4, 0, 0, 0, 5, 4, 3, 0, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 2, 3, 4, 0, 0, 
        0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 3, 2, 3, 4, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 4, 0, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 3, 2, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 2, 3, 0, 0, 
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 4, 1, 2, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 4, 3, 2, 1, 0, 0, 0, 0, 1, 2, 0, 0, 
        0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 4, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 2, 3, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 3, 2, 3, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 5, 0, 3, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
        0, 4, 3, 2, 1, 0, 0, 0, 2, 1, 2, 3, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 2, 1, 2, 3, 4, 0, 0, 4, 3, 2, 1, 0, 0, 0, 5, 4, 3, 2, 1, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 5, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 3, 2, 1, 2, 3, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 3, 4, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 3, 2, 3, 4, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 3, 2, 1, 2, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 4, 3, 2, 0, 0, 2, 1, 2, 3, 4, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 4, 0, 0, 
        0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 4, 1, 2, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 4, 3, 2, 3, 0, 0, 
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 4, 1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 1, 4, 0, 0, 
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 
        0, 0, 3, 2, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 4, 1, 2, 0, 0, 0, 0, 3, 2, 3, 4, 0, 0, 0, 3, 2, 3, 0, 0, 
        0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 4, 5, 6, 0, 
        0, 0, 0, 1, 2, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 3, 2, 3, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 4, 3, 4, 0, 0, 0, 3, 2, 3, 4, 5, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 5, 0, 0, 0, 5, 4, 3, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
        0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 3, 2, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 3, 2, 1, 2, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 4, 3, 2, 3, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 4, 3, 2, 1, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 1, 2, 3, 4, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 3, 0, 0, 0, 
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 4, 3, 4, 0, 0, 0, 3, 2, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 
        0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 4, 3, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 2, 0, 4, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 1, 2, 5, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 1, 2, 3, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 4, 1, 2, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 4, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 2, 1, 2, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 
        0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 4, 5, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 3, 4, 5, 0, 0, 0, 4, 0, 2, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


            return grid;
        }

        //public PieceTemplate[] BuildCompletePiece()
        //{
        //    PieceTemplate[] pieces = new PieceTemplate[9];

        //    Color[] colors = colorFamily.PickRandom(3).ToArray();
        //    FlowerTypes[] flowers = flowerz.PickRandom(3).ToArray();

        //    for (var i = 0; i < 9; i++) 
        //    {
        //        //var factor = GamePlayScreen.FactorSelection[i];

        //        //Build Shape part of piece
        //        byte[,] baseShape;

        //        var searchWidth = 0;
        //        var searchHeight = 0;

        //        Color[] colorMap = new Color[0];

        //        switch (factor)
        //        {
        //            case 3:
        //                searchWidth = SpriteLoader.ThreeSet.Width;
        //                searchHeight = SpriteLoader.ThreeSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.ThreeSet.GetData(colorMap);
        //                break;
        //            case 4:
        //                searchWidth = SpriteLoader.FourSet.Width;
        //                searchHeight = SpriteLoader.FourSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.FourSet.GetData(colorMap);
        //                break;
        //            case 5:
        //                searchWidth = SpriteLoader.FiveSet.Width;
        //                searchHeight = SpriteLoader.FiveSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.FiveSet.GetData(colorMap);
        //                break;
        //            case 6:
        //                searchWidth = SpriteLoader.SixSet.Width;
        //                searchHeight = SpriteLoader.SixSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.SixSet.GetData(colorMap);
        //                break;
        //            case 7:
        //                searchWidth = SpriteLoader.SevenSet.Width;
        //                searchHeight = SpriteLoader.SevenSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.SevenSet.GetData(colorMap);
        //                break;
        //            case 8:
        //                searchWidth = SpriteLoader.EightSet.Width;
        //                searchHeight = SpriteLoader.EightSet.Height;

        //                colorMap = new Color[searchWidth * searchHeight];
        //                SpriteLoader.EightSet.GetData(colorMap);
        //                break;
        //        }

        //        baseShape = new byte[factor, factor];

        //        var u = 0;
        //        var v = 0;

        //        var maxX = searchWidth / factor;
        //        var maxY = searchHeight / factor;

        //        var pickX = MasterRandom.FRandom.Next(0, maxX) * factor;
        //        var pickY = MasterRandom.FRandom.Next(0, maxY) * factor;

        //        for (var x = pickX; x < (factor + pickX); x++)
        //        {
        //            v = 0;

        //            for (var y = pickY; y < (factor + pickY); y++)
        //            {
        //                var currentColor = colorMap[y * searchWidth + x];

        //                if (currentColor.R == 153 && currentColor.G == 7 && currentColor.B == 0)
        //                    baseShape[u, v] = 1;
        //                else if (currentColor.R == 153 && currentColor.G == 72 && currentColor.B == 0)
        //                    baseShape[u, v] = 2;
        //                else if (currentColor.R == 153 && currentColor.G == 151 && currentColor.B == 0)
        //                    baseShape[u, v] = 3;
        //                else if (currentColor.R == 32 && currentColor.G == 153 && currentColor.B == 0)
        //                    baseShape[u, v] = 4;
        //                else if (currentColor.R == 0 && currentColor.G == 153 && currentColor.B == 90)
        //                    baseShape[u, v] = 5;
        //                else if (currentColor.R == 0 && currentColor.G == 122 && currentColor.B == 153)
        //                    baseShape[u, v] = 6;
        //                else if (currentColor.R == 22 && currentColor.G == 0 && currentColor.B == 153)
        //                    baseShape[u, v] = 7;
        //                else if (currentColor.R == 94 && currentColor.G == 0 && currentColor.B == 153)
        //                    baseShape[u, v] = 8;
        //                else if (currentColor.R == 153 && currentColor.G == 0 && currentColor.B == 137)
        //                    baseShape[u, v] = 9;
        //                else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 128)
        //                    baseShape[u, v] = 10;
        //                else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 204)
        //                    baseShape[u, v] = 11;
        //                else if (currentColor.R == 128 && currentColor.G == 179 && currentColor.B == 255)
        //                    baseShape[u, v] = 12;
        //                else if (currentColor.R == 128 && currentColor.G == 255 && currentColor.B == 179)
        //                    baseShape[u, v] = 13;
        //                else
        //                    baseShape[u, v] = 0;

        //                v++;
        //            }
        //            u++;
        //        }

        //        // define Colors

        //        Color color1 = Color.White;
        //        FlowerTypes flowerType = FlowerTypes.Undefined;
        //        if (i == 0 || i == 3 || i == 6)
        //        {
        //            color1 = colors[0]; 
        //            flowerType = flowerz[1];
        //        }
        //        else if (i == 1 || i == 4 || i == 7)
        //        {
        //            color1 = colors[1];
        //            flowerType = flowerz[0];
        //        }
        //        else
        //        {
        //            color1 = colors[2];
        //            flowerType = flowerz[2];
        //        }


        //        //Color color1 = colorFamily[MasterRandom.FRandom.Next(0, colorFamily.Length)];
        //        Color color2 = colorFamily[MasterRandom.FRandom.Next(0, colorFamily.Length)];

        //        // declare id
        //        //FlowerTypes flowerType = (FlowerTypes)MasterRandom.FRandom.Next(1, 10);

        //        pieces[i] = new PieceTemplate(color1, color2, baseShape, flowerType);
        //    }

        //    return pieces;
        //}

        //public byte[,] BuildPieceFromTexture(int factor)
        //{
        //    byte[,] baseShape;

        //    var searchWidth = 0;
        //    var searchHeight = 0;

        //    Color[] colorMap = new Color[0];

        //    switch (factor)
        //    {
        //        case 3:
        //            searchWidth = SpriteLoader.ThreeSet.Width;
        //            searchHeight = SpriteLoader.ThreeSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.ThreeSet.GetData(colorMap);
        //            break;
        //        case 4:
        //            searchWidth = SpriteLoader.FourSet.Width;
        //            searchHeight = SpriteLoader.FourSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FourSet.GetData(colorMap);
        //            break;
        //        case 5:
        //            searchWidth = SpriteLoader.FiveSet.Width;
        //            searchHeight = SpriteLoader.FiveSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FiveSet.GetData(colorMap);
        //            break;
        //        case 6:
        //            searchWidth = SpriteLoader.SixSet.Width;
        //            searchHeight = SpriteLoader.SixSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SixSet.GetData(colorMap);
        //            break;
        //        case 7:
        //            searchWidth = SpriteLoader.SevenSet.Width;
        //            searchHeight = SpriteLoader.SevenSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SevenSet.GetData(colorMap);
        //            break;
        //    }

        //    baseShape = new byte[factor, factor];

        //    var u = 0;
        //    var v = 0;

        //    var maxX = searchWidth / factor;
        //    var maxY = searchHeight / factor;

        //    var pickX = MasterRandom.FRandom.Next(0, maxX) * factor;
        //    var pickY = MasterRandom.FRandom.Next(0, maxY) * factor;

        //    for (var x = pickX; x < (factor + pickX); x++)
        //    {
        //        v = 0;

        //        for (var y = pickY; y < (factor + pickY); y++)
        //        {
        //            var currentColor = colorMap[y * searchWidth + x];

        //            if (currentColor.R == 153 && currentColor.G == 7 && currentColor.B == 0)
        //                baseShape[u, v] = 1;
        //            else if (currentColor.R == 153 && currentColor.G == 72 && currentColor.B == 0)
        //                baseShape[u, v] = 2;
        //            else if (currentColor.R == 153 && currentColor.G == 151 && currentColor.B == 0)
        //                baseShape[u, v] = 3;
        //            else if (currentColor.R == 32 && currentColor.G == 153 && currentColor.B == 0)
        //                baseShape[u, v] = 4;
        //            else if (currentColor.R == 0 && currentColor.G == 122 && currentColor.B == 153)
        //                baseShape[u, v] = 5;
        //            else if (currentColor.R == 22 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 6;
        //            else if (currentColor.R == 94 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 7;
        //            else if (currentColor.R == 153 && currentColor.G == 0 && currentColor.B == 137)
        //                baseShape[u, v] = 8;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 128)
        //                baseShape[u, v] = 9;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 204)
        //                baseShape[u, v] = 10;
        //            else if (currentColor.R == 128 && currentColor.G == 179 && currentColor.B == 255)
        //                baseShape[u, v] = 11;
        //            else if (currentColor.R == 128 && currentColor.G == 255 && currentColor.B == 179)
        //                baseShape[u, v] = 12;
        //            else
        //                baseShape[u, v] = 0;

        //            v++;
        //        }
        //        u++;
        //    }

        //    return baseShape;
        //}

        //public byte[,] BuildPieceFromTexture(int factor, int xP, int yP)
        //{
        //    byte[,] baseShape;

        //    var searchWidth = 0;
        //    var searchHeight = 0;

        //    Color[] colorMap = new Color[0];

        //    switch (factor)
        //    {
        //        case 3:
        //            searchWidth = SpriteLoader.ThreeSet.Width;
        //            searchHeight = SpriteLoader.ThreeSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.ThreeSet.GetData(colorMap);
        //            break;
        //        case 4:
        //            searchWidth = SpriteLoader.FourSet.Width;
        //            searchHeight = SpriteLoader.FourSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FourSet.GetData(colorMap);
        //            break;
        //        case 5:
        //            searchWidth = SpriteLoader.FiveSet.Width;
        //            searchHeight = SpriteLoader.FiveSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FiveSet.GetData(colorMap);
        //            break;
        //        case 6:
        //            searchWidth = SpriteLoader.SixSet.Width;
        //            searchHeight = SpriteLoader.SixSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SixSet.GetData(colorMap);
        //            break;
        //        case 7:
        //            searchWidth = SpriteLoader.SevenSet.Width;
        //            searchHeight = SpriteLoader.SevenSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SevenSet.GetData(colorMap);
        //            break;
        //        case 8:
        //            searchWidth = SpriteLoader.EightSet.Width;
        //            searchHeight = SpriteLoader.EightSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.EightSet.GetData(colorMap);
        //            break;
        //    }

        //    baseShape = new byte[factor, factor];

        //    var u = 0;
        //    var v = 0;

        //    var pickX = xP;
        //    var pickY = yP;

        //    for (var x = pickX; x < (factor + pickX); x++)
        //    {
        //        v = 0;

        //        for (var y = pickY; y < (factor + pickY); y++)
        //        {
        //            var currentColor = colorMap[y * searchWidth + x];

        //            if (currentColor.R == 153 && currentColor.G == 7 && currentColor.B == 0)
        //                baseShape[u, v] = 1;
        //            else if (currentColor.R == 153 && currentColor.G == 72 && currentColor.B == 0)
        //                baseShape[u, v] = 2;
        //            else if (currentColor.R == 153 && currentColor.G == 151 && currentColor.B == 0)
        //                baseShape[u, v] = 3;
        //            else if (currentColor.R == 32 && currentColor.G == 153 && currentColor.B == 0)
        //                baseShape[u, v] = 4;
        //            else if (currentColor.R == 0 && currentColor.G == 153 && currentColor.B == 90)
        //                baseShape[u, v] = 5;
        //            else if (currentColor.R == 0 && currentColor.G == 122 && currentColor.B == 153)
        //                baseShape[u, v] = 6;
        //            else if (currentColor.R == 22 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 7;
        //            else if (currentColor.R == 94 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 8;
        //            else if (currentColor.R == 153 && currentColor.G == 0 && currentColor.B == 137)
        //                baseShape[u, v] = 9;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 128)
        //                baseShape[u, v] = 10;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 204)
        //                baseShape[u, v] = 11;
        //            else if (currentColor.R == 128 && currentColor.G == 179 && currentColor.B == 255)
        //                baseShape[u, v] = 12;
        //            else if (currentColor.R == 128 && currentColor.G == 255 && currentColor.B == 179)
        //                baseShape[u, v] = 13;
        //            else
        //                baseShape[u, v] = 0;

        //            v++;
        //        }
        //        u++;
        //    }


        //    return baseShape;
        //}

        //public byte[,] BuildPieceFromTexture(int pickX, int pickY, int factor)
        //{
        //    byte[,] baseShape;

        //    var searchWidth = 0;
        //    var searchHeight = 0;

        //    Color[] colorMap = new Color[0];

        //    switch (factor)
        //    {
        //        case 3:
        //            searchWidth = SpriteLoader.ThreeSet.Width;
        //            searchHeight = SpriteLoader.ThreeSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.ThreeSet.GetData(colorMap);
        //            break;
        //        case 4:
        //            searchWidth = SpriteLoader.FourSet.Width;
        //            searchHeight = SpriteLoader.FourSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FourSet.GetData(colorMap);
        //            break;
        //        case 5:
        //            searchWidth = SpriteLoader.FiveSet.Width;
        //            searchHeight = SpriteLoader.FiveSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.FiveSet.GetData(colorMap);
        //            break;
        //        case 6:
        //            searchWidth = SpriteLoader.SixSet.Width;
        //            searchHeight = SpriteLoader.SixSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SixSet.GetData(colorMap);
        //            break;
        //        case 7:
        //            searchWidth = SpriteLoader.SevenSet.Width;
        //            searchHeight = SpriteLoader.SevenSet.Height;

        //            colorMap = new Color[searchWidth * searchHeight];
        //            SpriteLoader.SevenSet.GetData(colorMap);
        //            break;
        //    }

        //    baseShape = new byte[factor, factor];

        //    var u = 0;
        //    var v = 0;

        //    for (var x = pickX; x < (factor + pickX); x++)
        //    {
        //        v = 0;

        //        for (var y = pickY; y < (factor + pickY); y++)
        //        {
        //            var currentColor = colorMap[y * searchWidth + x];

        //            if (currentColor.R == 153 && currentColor.G == 7 && currentColor.B == 0)
        //                baseShape[u, v] = 1;
        //            else if (currentColor.R == 153 && currentColor.G == 72 && currentColor.B == 0)
        //                baseShape[u, v] = 2;
        //            else if (currentColor.R == 153 && currentColor.G == 151 && currentColor.B == 0)
        //                baseShape[u, v] = 3;
        //            else if (currentColor.R == 32 && currentColor.G == 153 && currentColor.B == 0)
        //                baseShape[u, v] = 4;
        //            else if (currentColor.R == 0 && currentColor.G == 153 && currentColor.B == 90)
        //                baseShape[u, v] = 5;
        //            else if (currentColor.R == 0 && currentColor.G == 122 && currentColor.B == 153)
        //                baseShape[u, v] = 6;
        //            else if (currentColor.R == 22 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 7;
        //            else if (currentColor.R == 94 && currentColor.G == 0 && currentColor.B == 153)
        //                baseShape[u, v] = 8;
        //            else if (currentColor.R == 153 && currentColor.G == 0 && currentColor.B == 137)
        //                baseShape[u, v] = 9;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 128)
        //                baseShape[u, v] = 10;
        //            else if (currentColor.R == 255 && currentColor.G == 128 && currentColor.B == 204)
        //                baseShape[u, v] = 11;
        //            else if (currentColor.R == 128 && currentColor.G == 179 && currentColor.B == 255)
        //                baseShape[u, v] = 12;
        //            else if (currentColor.R == 128 && currentColor.G == 255 && currentColor.B == 179)
        //                baseShape[u, v] = 13;
        //            else
        //                baseShape[u, v] = 0;

        //            v++;
        //        }
        //        u++;
        //    }

        //    return baseShape;
        //}


        public void Dispose()
        {

        }
    }
}
